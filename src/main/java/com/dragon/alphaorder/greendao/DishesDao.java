package com.dragon.alphaorder.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dragon.alphaorder.entity.Dishes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISHES".
*/
public class DishesDao extends AbstractDao<Dishes, String> {

    public static final String TABLENAME = "DISHES";

    /**
     * Properties of entity Dishes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DishesId = new Property(0, String.class, "dishesId", true, "DISHES_ID");
        public final static Property DishesName = new Property(1, String.class, "dishesName", false, "DISHES_NAME");
        public final static Property DishesImage = new Property(2, String.class, "dishesImage", false, "DISHES_IMAGE");
        public final static Property DishesPrice = new Property(3, double.class, "dishesPrice", false, "DISHES_PRICE");
    }


    public DishesDao(DaoConfig config) {
        super(config);
    }
    
    public DishesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISHES\" (" + //
                "\"DISHES_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: dishesId
                "\"DISHES_NAME\" TEXT," + // 1: dishesName
                "\"DISHES_IMAGE\" TEXT," + // 2: dishesImage
                "\"DISHES_PRICE\" REAL NOT NULL );"); // 3: dishesPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISHES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dishes entity) {
        stmt.clearBindings();
 
        String dishesId = entity.getDishesId();
        if (dishesId != null) {
            stmt.bindString(1, dishesId);
        }
 
        String dishesName = entity.getDishesName();
        if (dishesName != null) {
            stmt.bindString(2, dishesName);
        }
 
        String dishesImage = entity.getDishesImage();
        if (dishesImage != null) {
            stmt.bindString(3, dishesImage);
        }
        stmt.bindDouble(4, entity.getDishesPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dishes entity) {
        stmt.clearBindings();
 
        String dishesId = entity.getDishesId();
        if (dishesId != null) {
            stmt.bindString(1, dishesId);
        }
 
        String dishesName = entity.getDishesName();
        if (dishesName != null) {
            stmt.bindString(2, dishesName);
        }
 
        String dishesImage = entity.getDishesImage();
        if (dishesImage != null) {
            stmt.bindString(3, dishesImage);
        }
        stmt.bindDouble(4, entity.getDishesPrice());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Dishes readEntity(Cursor cursor, int offset) {
        Dishes entity = new Dishes( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dishesId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dishesName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dishesImage
            cursor.getDouble(offset + 3) // dishesPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dishes entity, int offset) {
        entity.setDishesId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDishesName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDishesImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDishesPrice(cursor.getDouble(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Dishes entity, long rowId) {
        return entity.getDishesId();
    }
    
    @Override
    public String getKey(Dishes entity) {
        if(entity != null) {
            return entity.getDishesId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dishes entity) {
        return entity.getDishesId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
